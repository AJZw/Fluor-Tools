# -*- coding: utf-8 -*-

## Fluor Tools Scraper #######################################################
# Author:     AJ Zwijnenburg
# Version:    v1.0
# Date:       2020-02-29
# Copyright:  Copyright (C) 2020 - AJ Zwijnenburg
# License:    MIT
##############################################################################

## Copyright notice ##########################################################
# Copyright 2020 AJ Zwijnenburg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal 
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in  
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE # WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
# THE SOFTWARE.
##############################################################################

"""
Reader and parser for ini and json stored fluorophore data

:class: Reader
    Parser for ini and json stored fluorophore data

:class: _DataOld
    Fluorophore data container for the reading of the 'old' fluorophore ini format.
    Obviously the 'old' classes are deprecated. 

:class: ReaderOld
    Parser for 'old' format ini stored fluorophore data
"""

from __future__ import annotations
import typing

import os.path

from . import abstract, json, Format, Source

class Reader(abstract.AbstractCollection):
    """
    A class providing the interface for reading the outputs generated by the scrapers
        :param path: path to the data files to read, if None no files are read, use load() instead.
    """
    def __init__(self, path: Union[None, str]=None) -> None:
        super().__init__()
        
        if path is not None:
            self.load(path)

    def _load_ini(self, path: str) -> None:
        """
        Loads and parses an ini formatted file
            :param path: path to the file
        """
        with open(path, mode="r", encoding="utf-8", newline=None) as file:
            data = file.readlines()

        # Grap single fluorophore and forward those to their respective parsers
        fluorophore_data = []
        for line in data:
            line = line.rstrip("\n")
            if not line:
                continue
            elif line[0] == "[":
                if fluorophore_data:
                    # Temporary identifier, will be corrected in when loading the data
                    fluorophore = abstract.AbstractData(abstract.AbstractID(Source.none, ""))
                    fluorophore.load(fluorophore_data, Format.ini)
                    self.collection[fluorophore.data_id.identifier] = fluorophore
                fluorophore_data = []
                fluorophore_data.append(line)
            else:
                fluorophore_data.append(line)
            
    def _load_json(self, path: str) -> None:
        """
        Loads and parses a json formatted file
            :param path: path to the file
        """
        with open(path, mode="rb") as file:
            data = file.read()
        
        data = json.loads(data, encoding="utf-8")
        for key in data:
            identifier = abstract.AbstractID(Source[data[key]["id"]["source"]], data[key]["id"]["identifier"])
            fluorophore = abstract.AbstractData(identifier)
            fluorophore.load(data[key], Format.json)
            self.collection[fluorophore.data_id.identifier] = fluorophore

    def __repr__(self) -> str:
        return f"(Reader:{len(self.collection)})"

class _DataOld(abstract.AbstractData):
    """
    Fluorophore data container for old data
    """
    def _load_ini(self, data: List[str]) -> None:
        """
        Imports a ini datafile
            :param data: data of a single fluorophore, split into lines without newline characters
        """
        # A reference might have missing data attributes, so construct, load if applicable, and check if valid to see if it is in use
        temp_reference = abstract.AbstractReference()
        for line in data:
            if not line:
                continue
            if line[:1] == "[":
                self.data_id = abstract.AbstractID(line[1:-1])
                self.header = line[1:-1]

            elif line[:9] == "database=":
                self.source = line[9:]
            elif line[:6] == "names=":
                self.names = line[6:].split(",")

            elif line[:23] == "extinction_coefficient=":
                self.extinction_coefficient = int(line[23:])
            elif line[:14] == "quantum_yield=":
                self.quantum_yield = float(line[14:])
            elif line[:10] == "intensity=":
                self.brightness = float(line[10:])
            elif line[:14] == "intensity_bin=":
                self.brightness_bin = int(line[14:])
    
            elif line[:10] == "reference=":
                reference = line[10:]

                if reference[:4] == "http":
                    ref = Reference()
                    ref.url = reference
                    self.references.append(ref)
                else:
                    ref = Reference()
                    ref.title = reference
                    self.references.append(ref)

            elif line[:22] == "absorption_wavelength=":
                self.absorption_wavelength = [float(x) for x in line[22:].split(",")]
            elif line[:21] == "absorption_intensity=":
                self.absorption_intensity = [float(x) for x in line[21:].split(",")]
            elif line[:22] == "excitation_wavelength=":
                self.excitation_wavelength = [float(x) for x in line[22:].split(",")]
            elif line[:21] == "excitation_intensity=":
                self.excitation_intensity = [float(x) for x in line[21:].split(",")]
            elif line[:20] == "emission_wavelength=":
                self.emission_wavelength = [float(x) for x in line[20:].split(",")]
            elif line[:19] == "emission_intensity=":
                self.emission_intensity = [float(x) for x in line[19:].split(",")]
            elif line[:22] == "two_photon_wavelength=":
                self.two_photon_wavelength = [float(x) for x in line[22:].split(",")]
            elif line[:21] == "two_photon_intensity=":
                self.two_photon_intensity = [float(x) for x in line[21:].split(",")]

        if temp_reference:
            self.references.append(temp_reference)

    def _load_json(self, data: Dict) -> None:
        """
        Import a json dictionary
            :param data: the json data
        """
        raise NotImplementedError("the old data type is always stored in ini format")

class ReaderOld(Reader):
    """
    A class providing an interface for reading the outputs generated by the old (v1) analysis
        :param path: path to the data files to read, if 'None' no files are read, use load() instead.
    """
    def __init__(self, path: Union[None, str]=None) -> None:
        super().__init__()
        
        if path is not None:
            self.load(path)

    def _load_ini(self, path: str) -> None:
        """
        Loads and parses an ini formatted file
            :param path: path to the file
        """
        with open(path, mode="r", encoding="utf-8", newline=None) as file:
            data = file.readlines()

        # Grap single fluorophore and forward those to their respective parsers
        fluorophore_data = []
        for line in data:
            line = line.rstrip("\n")
            if not line:
                continue
            elif line[0] == "[":
                if fluorophore_data:
                    fluorophore = _DataOld(abstract.AbstractID(""))
                    fluorophore.load(fluorophore_data, Format.ini)
                    self.collection[fluorophore.header] = fluorophore
                fluorophore_data = []
                fluorophore_data.append(line)
            else:
                fluorophore_data.append(line)
            
    def _load_json(self, path: str) -> None:
        """
        Loads and parses a json formatted file
            :param path: path to the file
        """
        raise NotImplementedError("The old data type is always stored as ini format")

    def __repr__(self) -> str:
        return f"(ReaderOld:{len(self.collection)})"
